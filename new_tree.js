function setup() {
  createCanvas(800, 800);
  tree = new Tree(0, 100, 10);
}

export default class Tree {
  constructor(x, y, size = 10) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.data = [
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //1
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //2
      [
        0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //3
      [
        0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
        0, 0, 0, 0, 0, 0,
      ], //4
      [
        0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2,
        1, 1, 1, 0, 0, 0,
      ], //5
      [
        0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2,
        2, 2, 2, 1, 0, 0,
      ], //6
      [
        0, 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 3, 2, 2, 2, 3, 3, 3, 3, 3, 2,
        2, 2, 2, 2, 1, 0,
      ], //7
      [
        0, 1, 2, 3, 3, 3, 2, 2, 2, 2, 3, 4, 4, 4, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2,
        3, 3, 3, 3, 1, 0,
      ], //8
      [
        1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 2, 2, 2, 3, 3, 3, 2, 4, 2, 3, 3,
        3, 3, 3, 3, 3, 1,
      ], //9
      [
        1, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3,
        3, 3, 3, 3, 4, 1,
      ], //10
      [
        0, 1, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 1, 0,
      ], //11
      [
        0, 0, 1, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 1, 0,
      ], //12
      [
        0, 0, 1, 3, 3, 4, 4, 4, 4, 3, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2,
        2, 2, 2, 1, 0, 0,
      ], //13
      [
        0, 1, 3, 2, 2, 2, 4, 4, 3, 3, 3, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 3, 3,
        3, 2, 2, 2, 1, 0,
      ], //14
      [
        1, 4, 3, 3, 2, 2, 2, 4, 5, 3, 3, 3, 3, 3, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5,
        3, 3, 3, 3, 3, 1,
      ], //15
      [
        1, 4, 3, 3, 3, 3, 3, 3, 4, 5, 3, 3, 5, 4, 4, 3, 3, 3, 2, 2, 2, 4, 4, 4,
        5, 5, 5, 3, 5, 1,
      ], //16
      [
        1, 5, 4, 3, 3, 5, 5, 4, 4, 4, 5, 5, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 4, 4,
        4, 4, 4, 5, 1, 0,
      ], //17
      [
        0, 1, 5, 5, 5, 5, 4, 4, 3, 3, 2, 2, 2, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 4, 5, 1, 0,
      ], //18
      [
        0, 0, 1, 15, 5, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 5, 5, 5, 5, 3, 3, 5, 5, 4,
        4, 4, 5, 1, 0, 0,
      ], //19
      [
        0, 0, 0, 1, 5, 4, 4, 4, 5, 5, 5, 3, 3, 3, 3, 3, 3, 5, 4, 4, 4, 4, 4, 4,
        4, 5, 1, 0, 0, 0,
      ], //20
      [
        0, 0, 0, 0, 1, 1, 5, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 6, 5, 4, 4, 4, 5,
        1, 1, 0, 0, 0, 0,
      ], //21
      [
        0, 0, 0, 0, 1, 5, 4, 4, 4, 4, 5, 6, 6, 5, 5, 5, 6, 6, 5, 4, 4, 4, 4, 4,
        5, 1, 0, 0, 0, 0,
      ], //22
      [
        0, 0, 0, 0, 1, 5, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 7, 5, 5, 4, 4, 4, 5, 5,
        5, 1, 0, 0, 0, 0,
      ], //23
      [
        0, 0, 0, 0, 0, 1, 1, 5, 5, 5, 1, 1, 8, 9, 7, 6, 6, 1, 5, 5, 5, 5, 1, 1,
        1, 0, 0, 0, 0, 0,
      ], //24
      [
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 8, 9, 7, 6, 7, 1, 1, 1, 1, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //25
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 8, 8, 8, 8, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //26
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 6, 7, 8, 7, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //27
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 8, 8, 8, 7, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //28
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 8, 8, 7, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //29
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 8, 9, 7, 8, 9, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
      ], //30
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 8, 6, 8, 9, 6, 7, 9, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
      ], //31
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 7, 6, 6, 8, 8, 8, 6, 7, 8, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
      ], //32
    ];
  }
  draw() {
    push();
    translate(this.x, this.y);
    for (let y in this.data) {
      for (let x in this.data[y]) {
        let pixel = this.data[y][x];
        if (pixel !== 0) {
          if (pixel === 1) {
            noStroke();
            fill(98, 82, 75);
          } else if (pixel === 2) {
            noStroke();
            fill(169, 199, 75);
          } else if (pixel === 3) {
            noStroke();
            fill(71, 171, 81);
          } else if (pixel === 4) {
            noStroke();
            fill(47, 109, 104);
          } else if (pixel === 5) {
            noStroke();
            fill(48, 62, 71);
          } else if (pixel === 6) {
            noStroke();
            fill(59, 26, 47);
          } else if (pixel === 7) {
            noStroke();
            fill(111, 39, 42);
          } else if (pixel === 8) {
            noStroke();
            fill(139, 64, 41);
          } else if (pixel === 9) {
            noStroke();
            fill(199, 118, 73);
          }

          rect(x * this.size, y * this.size, this.size, this.size);
        }
      }
    }
    pop();
  }
}
function draw() {
  tree.draw();
}

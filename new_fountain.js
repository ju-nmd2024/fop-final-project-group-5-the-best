export default class Fountain {
  constructor(x, y, size) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.data = [
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 10, 11, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //1
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 9, 1, 11,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //2
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1, 10, 1, 11,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //3
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 11, 10, 2, 1,
        10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //4
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 10, 1, 4, 10, 3, 1,
        10, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //5
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 4, 4, 9, 1, 4, 5, 9, 4, 2, 1,
        9, 4, 4, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //6
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 4, 3, 1, 1, 9, 1, 5, 2, 9, 4, 3, 1,
        9, 1, 1, 3, 4, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //7
      [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 5, 1, 1, 1, 7, 9, 1, 4, 5, 4, 9, 2, 2, 2,
        1, 9, 8, 1, 1, 1, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //8
      [
        0, 0, 0, 0, 0, 0, 0, 1, 5, 3, 1, 9, 9, 8, 10, 7, 1, 5, 4, 3, 8, 3, 3, 2,
        1, 7, 10, 8, 9, 10, 1, 3, 4, 1, 0, 0, 0, 0, 0, 0, 0,
      ], //9
      [
        0, 0, 0, 0, 0, 0, 0, 1, 5, 1, 8, 10, 11, 10, 10, 7, 1, 5, 4, 2, 8, 2, 2,
        2, 1, 7, 10, 10, 11, 9, 10, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0,
      ], //10
      [
        0, 0, 0, 0, 0, 0, 0, 1, 5, 9, 9, 11, 10, 11, 8, 7, 1, 4, 3, 3, 7, 3, 3,
        2, 1, 7, 8, 11, 10, 11, 9, 9, 3, 1, 0, 0, 0, 0, 0, 0, 0,
      ], //11
      [
        0, 0, 0, 0, 0, 0, 0, 10, 10, 1, 10, 10, 10, 8, 8, 8, 7, 1, 2, 2, 7, 2,
        2, 1, 7, 8, 8, 10, 10, 9, 8, 1, 10, 10, 0, 0, 0, 0, 0, 0, 0,
      ], //12
      [
        0, 0, 0, 0, 0, 0, 10, 1, 3, 4, 1, 9, 9, 11, 10, 10, 8, 7, 1, 1, 7, 1, 1,
        7, 8, 10, 9, 9, 8, 8, 1, 3, 2, 1, 10, 0, 0, 0, 0, 0, 0,
      ], //13
      [
        0, 0, 0, 0, 0, 0, 11, 0, 1, 3, 4, 1, 1, 1, 9, 9, 9, 8, 11, 10, 8, 7, 9,
        9, 9, 8, 8, 1, 1, 1, 3, 2, 1, 0, 11, 0, 0, 0, 0, 0, 0,
      ], //14
      [
        0, 0, 0, 0, 0, 0, 11, 0, 0, 1, 3, 4, 4, 4, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1,
        1, 1, 1, 3, 3, 3, 2, 1, 0, 0, 11, 0, 0, 0, 0, 0, 0,
      ], //15
      [
        0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3,
        2, 3, 2, 2, 1, 1, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0,
      ], //16
      [
        0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1,
        1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0,
      ], //17
      [
        0, 0, 0, 0, 0, 0, 9, 0, 1, 1, 2, 2, 1, 3, 3, 3, 3, 3, 3, 2, 10, 2, 2, 2,
        2, 2, 2, 2, 1, 2, 2, 1, 1, 0, 9, 0, 0, 0, 0, 0, 0,
      ], //18
      [
        0, 0, 0, 0, 0, 0, 9, 1, 3, 2, 2, 1, 1, 1, 1, 1, 3, 3, 2, 3, 11, 3, 2, 2,
        2, 1, 1, 1, 1, 1, 2, 2, 3, 1, 9, 0, 0, 0, 0, 0, 0,
      ], //19
      [
        0, 0, 0, 0, 0, 1, 9, 3, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 11, 1, 1, 1,
        1, 2, 2, 2, 2, 2, 1, 1, 2, 3, 9, 1, 0, 0, 0, 0, 0,
      ], //20
      [
        0, 0, 0, 1, 1, 5, 9, 1, 1, 2, 2, 2, 2, 2, 6, 6, 6, 1, 4, 4, 10, 3, 2, 1,
        6, 6, 6, 2, 2, 2, 2, 2, 1, 1, 9, 3, 1, 1, 0, 0, 0,
      ], //21
      [
        0, 0, 1, 5, 5, 2, 9, 2, 2, 2, 2, 6, 6, 6, 7, 7, 7, 7, 1, 4, 9, 3, 1, 7,
        7, 10, 10, 10, 6, 6, 2, 2, 2, 2, 9, 2, 3, 4, 1, 0, 0,
      ], //22
      [
        0, 1, 5, 3, 1, 1, 8, 2, 6, 6, 6, 8, 10, 10, 10, 7, 8, 8, 1, 4, 9, 3, 1,
        7, 7, 7, 7, 10, 10, 11, 6, 6, 6, 2, 8, 1, 1, 3, 4, 1, 0,
      ], //23
      [
        0, 1, 5, 1, 2, 2, 8, 6, 8, 10, 7, 10, 10, 7, 7, 7, 7, 1, 1, 3, 9, 3, 1,
        1, 7, 7, 7, 7, 7, 10, 8, 10, 11, 6, 8, 2, 2, 1, 4, 1, 0,
      ], //24
      [
        1, 5, 2, 1, 2, 6, 8, 9, 10, 10, 7, 7, 7, 7, 7, 7, 1, 4, 1, 4, 9, 2, 1,
        2, 1, 7, 7, 7, 7, 7, 8, 7, 10, 10, 8, 6, 3, 1, 3, 4, 1,
      ], //25
      [
        1, 5, 1, 3, 6, 9, 7, 8, 10, 8, 7, 7, 7, 7, 7, 7, 1, 4, 4, 1, 9, 1, 2, 2,
        1, 7, 7, 7, 7, 7, 7, 8, 8, 10, 7, 9, 6, 3, 1, 4, 1,
      ], //26
      [
        1, 5, 1, 6, 10, 9, 7, 8, 8, 8, 7, 7, 7, 7, 7, 1, 4, 1, 4, 3, 8, 3, 2, 1,
        2, 1, 7, 7, 7, 7, 7, 8, 10, 8, 7, 9, 9, 6, 1, 4, 1,
      ], //27
      [
        1, 4, 1, 9, 11, 8, 7, 8, 11, 10, 8, 7, 7, 7, 7, 1, 4, 4, 1, 1, 8, 1, 1,
        2, 2, 1, 7, 7, 7, 8, 8, 8, 11, 8, 7, 8, 11, 10, 1, 4, 1,
      ], //28
      [
        1, 4, 1, 9, 10, 10, 8, 8, 8, 8, 10, 8, 7, 7, 7, 7, 1, 4, 4, 4, 8, 3, 2,
        2, 1, 7, 7, 7, 8, 8, 8, 10, 8, 8, 8, 8, 10, 10, 1, 4, 1,
      ], //29
      [
        1, 3, 5, 1, 9, 10, 9, 9, 9, 8, 10, 8, 8, 8, 8, 8, 8, 1, 4, 3, 7, 3, 3,
        1, 7, 7, 8, 8, 8, 8, 10, 8, 9, 9, 9, 10, 10, 1, 4, 3, 1,
      ], //30
      [
        0, 1, 4, 1, 9, 9, 9, 10, 10, 9, 9, 9, 10, 11, 11, 10, 8, 8, 8, 1, 1, 7,
        1, 1, 8, 8, 8, 8, 8, 8, 9, 9, 9, 10, 11, 11, 11, 1, 3, 1, 0,
      ], //31
      [
        0, 1, 3, 5, 1, 1, 9, 11, 11, 11, 9, 9, 9, 9, 8, 11, 10, 8, 10, 10, 7,
        11, 10, 10, 10, 10, 8, 9, 9, 9, 9, 9, 10, 10, 11, 1, 1, 3, 2, 1, 0,
      ], //32
      [
        1, 3, 1, 3, 4, 5, 1, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 11, 8, 7, 8,
        11, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 9, 1, 3, 3, 2, 1, 2, 1,
      ], //33
      [
        1, 5, 3, 1, 1, 3, 4, 1, 1, 9, 9, 10, 10, 10, 10, 10, 11, 10, 10, 8, 8,
        10, 10, 10, 10, 9, 10, 10, 10, 9, 10, 10, 1, 1, 3, 2, 1, 1, 2, 2, 1,
      ], //34
      [
        1, 5, 4, 3, 2, 1, 3, 5, 5, 1, 1, 1, 1, 10, 10, 10, 10, 11, 10, 10, 11,
        11, 11, 11, 10, 9, 9, 9, 1, 1, 1, 1, 3, 3, 2, 1, 2, 2, 2, 2, 1,
      ], //35
      [
        1, 5, 5, 4, 3, 2, 1, 1, 3, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 3, 3, 3, 3, 2, 1, 1, 2, 2, 2, 2, 2, 1,
      ], //36
      [
        0, 1, 5, 5, 4, 3, 3, 2, 1, 1, 1, 1, 3, 4, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3,
        3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 0,
      ], //37
      [
        0, 1, 5, 5, 5, 4, 4, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0,
      ], //38
      [
        0, 0, 1, 5, 5, 5, 4, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0,
      ], //39
      [
        0, 0, 0, 1, 1, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 3, 4, 3, 3, 3, 4, 3, 3, 3,
        3, 2, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0,
      ], //40
      [
        0, 0, 0, 0, 0, 1, 5, 4, 5, 4, 4, 5, 4, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3,
        3, 3, 2, 3, 3, 2, 3, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0,
      ], //41
      [
        0, 0, 0, 0, 0, 0, 1, 1, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3,
        2, 3, 3, 2, 2, 3, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0,
      ], //42
      [
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 4, 3, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
        2, 2, 2, 3, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //43
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ], //44
    ];
  }
  draw() {
    push();
    translate(this.x, this.y);
    for (let y in this.data) {
      for (let x in this.data[y]) {
        let pixel = this.data[y][x];
        if (pixel !== 0) {
          if (pixel === 1) {
            noStroke();
            fill(86, 93, 96);
          } else if (pixel === 2) {
            noStroke();
            fill(130, 139, 141);
          } else if (pixel === 3) {
            noStroke();
            fill(180, 190, 192);
          } else if (pixel === 4) {
            noStroke();
            fill(222, 228, 227);
          } else if (pixel === 5) {
            noStroke();
            fill(245, 245, 245);
          } else if (pixel === 6) {
            noStroke();
            fill(57, 81, 96);
          } else if (pixel === 7) {
            noStroke();
            fill(111, 154, 166);
          } else if (pixel === 8) {
            noStroke();
            fill(149, 192, 198);
          } else if (pixel === 9) {
            noStroke();
            fill(198, 230, 230);
          } else if (pixel === 10) {
            noStroke();
            fill(218, 243, 238);
          } else if (pixel === 11) {
            noStroke();
            fill(244, 255, 250);
          }

          rect(x * this.size, y * this.size, this.size, this.size);
        }
      }
    }
    pop();
  }
}

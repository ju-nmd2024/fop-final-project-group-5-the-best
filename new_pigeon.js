const size = 10;

export default class PixelPigeon {
  constructor(x = 0, y = 0, size = 10) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.speed = 10;
    this.data = [
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 4, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 4, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 4, 4, 6, 6, 6, 4, 4, 6, 6, 6, 4, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 4, 6, 6, 6, 6, 6, 0, 4, 6, 6, 6, 4, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 4, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
        4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 1, 1, 4, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7,
        7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 1, 4, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 7, 7,
        7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 4, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 7, 7, 7, 7, 7,
        7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7,
        7, 7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 4, 4, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7,
        7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 4, 4, 7, 7, 7, 4, 4, 7, 7, 7, 7,
        7, 7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 4, 4, 7, 7, 7,
        7, 7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 4, 5, 4, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 4, 4, 7, 7,
        7, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 4, 5, 5, 5, 4, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 4, 4, 7,
        4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 4, 5, 5, 5, 5, 5, 4, 4, 7, 7, 7, 7, 4, 4, 7, 4, 4, 4, 4,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 4, 5, 5, 5, 5, 5, 4, 4, 0, 0, 0, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 4, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 4, 5, 5, 5, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 6, 6, 6, 6, 6,
        6, 6, 6, 4, 4, 4, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4,
        4, 4, 4, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ],
      [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ],
    ];
  }

  draw() {
    push();
    translate(this.x, this.y);
    for (let y in this.data) {
      for (let x in this.data[y]) {
        let pixel = this.data[y][x];
        if (pixel !== 0) {
          if (pixel === 1) {
            noStroke();
            fill(255, 207, 147);
          } else if (pixel === 2) {
            noStroke();
            fill(235, 50, 40);
          } else if (pixel === 3) {
            noStroke();
            fill(255, 10, 10);
          } else if (pixel === 4) {
            noStroke();
            fill(50, 50, 50);
          } else if (pixel === 5) {
            noStroke();
            fill(63, 57, 49);
          } else if (pixel === 6) {
            noStroke();
            fill(124, 124, 124);
          } else if (pixel === 7) {
            noStroke();
            fill(200, 190, 190);
          }

          rect(x * this.size, y * this.size, this.size, this.size);
        }
      }
    }
    pop();

    if (this.walkShop()) {
      showPopup();
      storePopup = true;
    }
  }

  move() {
    if (keyIsDown(65)) {
      // A key
      this.x -= this.speed;
      if (this.x < 0) {
        this.x = 0;
      }
      console.log("A pressed");
    }
    if (keyIsDown(68)) {
      // D key
      this.x += this.speed;
      if (this.x > 800 - 80) {
        this.x = 800 - 80;
      }
      console.log("D pressed");
    }
    if (keyIsDown(87)) {
      // W key
      this.y -= this.speed;
      if (this.y < 0) {
        this.y = 0;
      }
      console.log("W pressed");
    }
    if (keyIsDown(83)) {
      // S key
      this.y += this.speed;
      if (this.y > 800 - 60) {
        this.y = 800 - 60;
      }
      console.log("S pressed");
    }
  }

  walkShop() {
    return (
      this.x < storeX + 50 + storeW &&
      this.x + this.size * 10 > storeX &&
      this.y < storeY + 50 + storeH &&
      this.y + this.size * 10 > storeY
    );
  }
}
